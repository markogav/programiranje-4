#include <iostream>
#include <vector>
#define ll long long
using namespace std;
const ll INF = (ll)1e10;
void floydWarshall(vector<vector<ll>> &dist) {
    int vert = (int)dist.size();
    for (int k = 0; k < vert; ++k) {
        for (int i = 0; i < vert; ++i) {
            if (dist[i][k] == INF) continue;
            for (int j = 0; j < vert; ++j) {
                if (dist[k][j] == INF) continue;
                ll wei = dist[i][k] + dist[k][j];
                if (wei < dist[i][j])
                    dist[i][j] = wei;
            }
        }
    }
}
ll cost(const vector<vector<ll>> &dist) {
    ll cost = 0;
    int n = dist.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] != INF)
                cost += dist[i][j];
        }
    }
    return cost;
}
int main() {
    int vert, edg;
    ll l;
    cin>>vert>>edg>>l;
    vector<vector<ll>> dist(vert, vector<ll>(vert, INF));
    struct Edge {int o,d; ll tez;};
    vector<Edge> edges;
    for (int i = 0; i < vert; ++i)
        dist [i][i] = 0;
    for (int e = 0; e < edg; ++e) {
        int o, d;
        ll tez;
        cin>>o>>d>>tez;
        o--;
        d--;
        edges.push_back({o,d,tez});
        if (tez < dist[o][d])
            dist[o][d] = tez;
        if (tez < dist[d][o])
            dist[d][o] = tez;
    }
    vector<vector<ll>> dis = dist;
    floydWarshall(dist);
    ll orgc = cost(dist);
    ll mas = orgc;
    for (auto &e : edges) {
        vector<vector<ll>> temp = dis;
        temp[e.o][e.d] = INF;
        temp[e.d][e.o] = INF;
        floydWarshall(temp);
        ll nc = cost(temp);
        if (nc > mas)
            mas = nc;
    }
    cout<<orgc<<" "<<mas<<"\n";
    return 0;
}
